apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: true
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30000"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: gateway-service
    name: gateway-service
  spec:
    ports:
    - name: "8085"
      port: 8085
      targetPort: 8085
      nodePort: 30000
    type: NodePort
    selector:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: gateway-service
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: kafka
    name: kafka-server
  spec:
    ports:
 #   - name: "9092"
 #     port: 9092
 #     targetPort: 9092
    - name: "29092"
      port: 29092
      targetPort: 29092
    selector:
      io.kompose.service: kafka
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30001"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: movie-service
    name: movie-service
  spec:
    ports:
    - name: "8083"
      port: 8083
      targetPort: 8083
      nodePort: 30001
    type: NodePort
    selector:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: movie-service
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-db
    name: mysql-db
  spec:
    ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
    selector:
      io.kompose.service: mysql-db
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30002"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: order-service
    name: order-service
  spec:
    ports:
    - name: "8081"
      port: 8081
      targetPort: 8081
      nodePort: 30002
    type: NodePort
    selector:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: order-service
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30003"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: payment-service
    name: payment-service
  spec:
    ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
      nodePort: 30003
    type: NodePort
    selector:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: payment-service
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: zookeeper
    name: zookeeper
  spec:
    ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
    selector:
      io.kompose.service: zookeeper
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30003"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: gateway-service
    name: gateway-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        release: prometheus
        app: prometheus-node-exporter
        #app: rpc-app
        io.kompose.service: gateway-service
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          release: prometheus
          app: prometheus-node-exporter
          #app: rpc-app
          io.kompose.service: gateway-service
      spec:
        containers:
        - image:  index.docker.io/mrhiros/dsbd:api-gateway
          imagePullPolicy: ""
          name: gateway-service
          ports:
          - containerPort: 8085
          resources: {}
        imagePullSecrets:
          - name: regcred
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: kafka
    name: kafka
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: kafka
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: kafka
      spec:
        containers:
        - env:
          - name: KAFKA_ADVERTISED_HOST_NAME
            value: kafka
          - name: KAFKA_ADVERTISED_LISTENERS  #9092 all'interno del pod e del container di kafka    29092  acceessibile all'esterno del pod/container
            value: LISTENER_INTERNAL://localhost:9092,LISTENER_EXTERNAL://kafka-server:29092
          - name: KAFKA_ADVERTISED_PORT
            value: "9092"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: LISTENER_INTERNAL
          - name: KAFKA_LISTENERS    # fa il binding con i rispettivi host del KAFKA_ADVERTISED_LISTENERS
            value: LISTENER_INTERNAL://0.0.0.0:9092,LISTENER_EXTERNAL://0.0.0.0:29092
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
          - name: KAFKA_PORT
            value: "9092"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper:2181
          image: wurstmeister/kafka
          imagePullPolicy: ""
          name: kafka
          ports:
          - containerPort: 9092
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30003"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: movie-service
    name: movie-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        release: prometheus
        app: prometheus-node-exporter
        #app: rpc-app
        io.kompose.service: movie-service
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          release: prometheus
          app: prometheus-node-exporter
          #app: rpc-app
          io.kompose.service: movie-service
      spec:
        containers:
        - image: index.docker.io/mrhiros/dsbd:movie-service
          imagePullPolicy: ""
          name: movie-service
          ports:
          - containerPort: 8083
          resources: {}
        imagePullSecrets:
          - name: regcred
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30003"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-db
    name: mysql-db
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mysql-db
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: mysql-db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: dsbs
          - name: MYSQL_PASSWORD
            value: sniv
          - name: MYSQL_ROOT_PASSWORD
            value: root
          - name: MYSQL_USER
            value: vins
          image: mysql:5.6
          imagePullPolicy: ""
          name: mysql-db
          ports:
          - containerPort: 3306
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30003"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: order-service
    name: order-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        release: prometheus
        app: prometheus-node-exporter
        #app: rpc-app
        io.kompose.service: order-service
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          release: prometheus
          app: prometheus-node-exporter
          #app: rpc-app
          io.kompose.service: order-service
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: dsbs
          - name: MYSQL_PASSWORD
            value: sniv
          - name: MYSQL_ROOT_PASSWORD
            value: root
          - name: MYSQL_USER
            value: vins
          image: index.docker.io/mrhiros/dsbd:order-service
          imagePullPolicy: ""
          name: order-service
          ports:
          - containerPort: 8081
          resources: {}
        imagePullSecrets:
          - name: regcred
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      prometheus.io/scrape: "true"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: default
      prometheus.io/path: /metrics
      prometheus.io/port: "30003"
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      release: prometheus
      app: prometheus-node-exporter
      #app: rpc-app
      io.kompose.service: payment-service
    name: payment-service
  spec:
    replicas: 1
    selector:
      matchLabels:
        release: prometheus
        app: prometheus-node-exporter
        #app: rpc-app
        io.kompose.service: payment-service
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          release: prometheus
          app: prometheus-node-exporter
          #app: rpc-app
          io.kompose.service: payment-service
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: dsbs
          - name: MYSQL_PASSWORD
            value: sniv
          - name: MYSQL_ROOT_PASSWORD
            value: root
          - name: MYSQL_USER
            value: vins
          image: index.docker.io/mrhiros/dsbd:payment-service
          imagePullPolicy: ""
          name: payment-service
          ports:
          - containerPort: 8082
          resources: {}
        imagePullSecrets:
          - name: regcred
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
        -o kubem.yml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: zookeeper
    name: zookeeper
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: zookeeper
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: /snap/kompose/19/kompose-linux-amd64 convert -f docker-compose.yml
            -o kubem.yml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: zookeeper
      spec:
        containers:
        - image: wurstmeister/zookeeper
          imagePullPolicy: ""
          name: zookeeper
          ports:
          - containerPort: 2181
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
kind: List
metadata: {}

